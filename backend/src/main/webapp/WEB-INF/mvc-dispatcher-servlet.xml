<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 这个bean要放在context:component-scan这个前面，不然会出现中文乱码 -->
    <bean
            class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="stringHttpMessageConverter" />
                <ref bean="byteArrayHttpMessageConverter" />
                <ref bean="fastJsonHttpMessageConverter" />
            </list>
        </property>
    </bean>
    <!--指明 controller 所在包，并扫描其中的注解-->

    <context:component-scan base-package="com.project.controller">
        <!--use-default-filters="false"-->
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>-->
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"></context:include-filter>-->
    </context:component-scan>

    <!-- websocket配置 -->
    <bean id="websocket" class="com.project.websocket.TextMessageHandler"/>
    <!--<websocket:handlers>
        <websocket:mapping path="/socket/log" handler="websocket"/>
        <websocket:handshake-interceptors>
            <bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>-->
    <context:component-scan base-package="com.project.service"/>
    <!--<context:component-scan base-package="com.project.websocket"/>-->
    <!--<context:component-scan base-package="test1.*"/>-->
    <!--<context:component-scan base-package="com.gaussic">-->
    <!---->
    <!--</context:component-scan>-->
    <!--<bean id="courseService" class="com.gaussic.service.impl.CourseServiceImpl">-->
    <!--<property name="courseController" ref="courseController"></property>-->
    <!--</bean>-->
    <!--<bean id="courseController" class="com.gaussic.controller.CourseController">-->

    <!--</bean>-->

    <!-- web socket package -->
    <context:component-scan base-package="com.project.websocket"/>

    <!-- 下面标签可以不加 等价于所有component-scan-->
    <context:annotation-config />

    <!-- 这个重点，标注必须加，websocket用到-->
    <mvc:annotation-driven/>

    <!-- 静态资源(js、image等)的访问 -->
    <!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
    <mvc:default-servlet-handler/>
    <!--&lt;!&ndash; 静态资源处理， css， js， imgs &ndash;&gt;-->
    <!--<mvc:resources mapping="/static/**" location="/static/" />-->
    <!--<mvc:resources mapping="/resources/**" location="/resources/" />-->

    <bean id="byteArrayHttpMessageConverter"
          class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />

    <bean id="stringHttpMessageConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <bean id="fastJsonHttpMessageConverter"
          class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json</value>
            </list>
        </property>
        <property name="features">
            <list>
                <!-- 输出key时是否使用双引号 -->
                <value>QuoteFieldNames</value>
                <!-- 是否输出值为null的字段 -->
                <!-- <value>WriteMapNullValue</value> -->
                <!-- 数值字段如果为null,输出为0,而非null -->
                <value>WriteNullNumberAsZero</value>
                <!-- List字段如果为null,输出为[],而非null -->
                <value>WriteNullListAsEmpty</value>
                <!-- 字符类型字段如果为null,输出为"",而非null -->
                <value>WriteNullStringAsEmpty</value>
                <!-- Boolean字段如果为null,输出为false,而非null -->
                <value>WriteNullBooleanAsFalse</value>
                <!-- null String不输出  -->
                <value>WriteNullStringAsEmpty</value>
                <!-- null String也要输出  -->
                <!-- <value>WriteMapNullValue</value> -->

                <!-- Date的日期转换器 -->
                <value>WriteDateUseDateFormat</value>
            </list>
        </property>
    </bean>

    <mvc:annotation-driven />
    <!-- 开启注解 -->
   <!-- <mvc:annotation-driven>
        &lt;!&ndash; 注册FastJson转换器 &ndash;&gt;
        <mvc:message-converters
                register-defaults="true">
            &lt;!&ndash; 避免IE执行AJAX时,返回JSON出现下载文件 &ndash;&gt;
            <bean id="fastJsonHttpMessageConverter"
                  class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                &lt;!&ndash;
                | 这个地方能自己配置一些东西，比如时间的格式化，null输出""等等
                | <property name="serializerFeature"></property>
                | &ndash;&gt;
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>-->

    <!--ViewResolver 视图解析器-->
    <!--用于支持Servlet、JSP视图解析-->


    <!-- 拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/login"/>
            <mvc:exclude-mapping path="/test"/>
            <mvc:exclude-mapping path="/user/register"/>
            <mvc:exclude-mapping path="/order/canuse"/>
            <mvc:exclude-mapping path="/order/getallnode"/>
            <mvc:exclude-mapping path="/order/nodestatus"/>
            <mvc:exclude-mapping path="/error/*"/>
            <mvc:exclude-mapping path="/**/fonts/*"/>
            <mvc:exclude-mapping path="/**/*.css"/>
            <mvc:exclude-mapping path="/**/*.js"/>
            <mvc:exclude-mapping path="/**/*.png"/>
            <mvc:exclude-mapping path="/**/*.gif"/>
            <mvc:exclude-mapping path="/**/*.jpg"/>
            <mvc:exclude-mapping path="/**/*.jpeg"/>
            <bean class="com.project.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>-->
    <!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
    <!--<bean-->
    <!--class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">-->
    <!--<property name="order" value="1" />-->
    <!--<property name="mediaTypes">-->
    <!--<map>-->
    <!--<entry key="json" value="application/json" />-->
    <!--<entry key="xml" value="application/xml" />-->
    <!--<entry key="htm" value="text/html" />-->
    <!--</map>-->
    <!--</property>-->

    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <map>
                <entry key="ResourceNotFoundException" value="error/error404"/>
                <entry key=".DataAccessException" value="error/error500"/>
                <entry key=".InsufficientAuthority" value="error/error501"/>
            </map>
        </property>
        <property name="statusCodes">
            <map>
                <entry key="error/error404" value="404"/>
                <entry key="error/error500" value="500"/>
                <entry key="error/error501" value="501"/>
            </map>
        </property>
    </bean>

    <!--<property name="defaultViews">-->
    <!--<list>-->
    <!--&lt;!&ndash; JSON View &ndash;&gt;-->
    <!--<bean-->
    <!--class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">-->
    <!--</bean>-->
    <!--</list>-->
    <!--</property>-->
    <!--<property name="ignoreAcceptHeader" value="true" />-->
    <!--</bean>-->

    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsps/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--&lt;!&ndash; 默认的视图解析器 在上边的解析错误时使用 &ndash;&gt;-->
    <!--<bean id="defaultViewResolver"-->
    <!--class="org.springframework.web.servlet.view.InternalResourceViewResolver"-->
    <!--p:order="1">-->
    <!--<property name="viewClass"-->
    <!--value="org.springframework.web.servlet.view.JstlView" />-->
    <!--<property name="contentType" value="text/html" />-->
    <!--<property name="prefix" value="/jsp/" />-->
    <!--<property name="suffix" value=".jsp" />-->
    <!--</bean>-->

    <!--1024*1024即1M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="1048576"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>

    <!-- 控制器异常处理 -->
    <bean id="exceptionHandlerExceptionResolver"
          class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"/>

</beans>
